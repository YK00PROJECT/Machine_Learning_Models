# -*- coding: utf-8 -*-
"""Apriori_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jIP580rY05HlT0Vr8WK64PaZWqugVK-O

Importing the libraries
"""

!pip install apyori

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from apyori import apriori
from mlxtend.frequent_patterns import apriori, association_rules

"""Data Processing"""

df = pd.read_csv('Market_Basket_Optimisation.csv', header = None)
basket_data = []
for i in range(0, 7501):
  basket_data.append([str(df.values[i,j]) for j in range(0, 20)])

# Load the dataset
df = pd.read_csv('Market_Basket_Optimisation.csv', header=None)

# Initialize an empty list to store basket data
basket_data = []

# Iterate through each row in the DataFrame
for i in range(len(df)):
    # Extract each row and convert to list, skipping missing values
    basket = [str(item) for item in df.iloc[i] if not pd.isna(item)]
    basket_data.append(basket)

print(basket_data[:5])  # Print first 5 baskets to verify

"""Training the Apriori model on the dataset"""

!pip install mlxtend

from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
import pandas as pd # Import pandas

# Assuming basket_data is already defined as in your previous code snippets

df = pd.DataFrame(basket_data) # Convert basket_data to DataFrame

# Create a one-hot encoded DataFrame
onehot = pd.get_dummies(df.apply(pd.Series).stack()).groupby(level=0).max() # Use groupby and max to ensure only 0 or 1

rules = apriori(onehot, min_support=0.003, use_colnames=True)
rules = association_rules(rules, metric="lift", min_threshold=3)
print(rules)

"""Displaying the first results coming directly from the output of the Apriori function"""

results = list(rules)
results

"""Putting the results well organized into a pandas Dataframe"""

def inspect(results):
    lhs = [tuple(result['antecedents'])[0] for _, result in results.iterrows()] # Access values using column names
    rhs = [tuple(result['consequents'])[0] for _, result in results.iterrows()] # Access values using column names
    supports = [result['support'] for _, result in results.iterrows()] # Access values using column names
    confidences = [result['confidence'] for _, result in results.iterrows()] # Access values using column names
    lifts = [result['lift'] for _, result in results.iterrows()] # Access values using column names
    return list(zip(lhs, rhs, supports, confidences, lifts))

resultsinDataFrame = pd.DataFrame(inspect(rules), columns = ['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])

"""Displaying the results non sorted"""

resultsinDataFrame

"""Displaying the results sorted by descending lifts"""

resultsinDataFrame.nlargest(n = 10, columns = 'Lift')