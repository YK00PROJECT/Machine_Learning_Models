# -*- coding: utf-8 -*-
"""Artificial_Neural_Network(ANN).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1On5NFGXskCrPLqJfZIxcOA15D7uxRECN

Artificial Neural Network

Importing Libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split

tf.__version__

"""Data preprocessing, importing dataset"""

df = pd.read_csv('Churn_Modelling.csv')
df.head()

x = df.iloc[:,3:-1].values
y = df.iloc[:,-1].values
display(x,y)

"""Encoding Categorical Data (Label encoding for the gender column and One hot encoding for geography column)"""

le = LabelEncoder()
x[:,2] = le.fit_transform(x[:,2])
display(x)
he = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
x = np.array(he.fit_transform(x))
display(x)

"""Splitting dataset into training and test sets"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)

"""Feature Scaling"""

fs = StandardScaler()
x_train = fs.fit_transform(x_train)
x_test = fs.transform(x_test)

"""Building the ANN"""

ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=6, activation='relu'))
ann.add(tf.keras.layers.Dense(units=6, activation='relu'))
ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

"""Compiling and Training the ANN"""

ann.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
ann.fit(x_train, y_train, batch_size=32, epochs=100)

ann.summary()
ann.get_weights()

"""Predicting result of test set and evaluate the model using confusion matrix

Making the prediction and evaluating the model
Predict whether a male customer with active credit card as well as considered an active member  (age 40), who lives in France, has credit score of 600, having a 3 years tenure and have a salary of 50000, will leave the bank or not?
Breaking down the parameters
Geography = France, Credit score = 600, Gender = Male, Age = 40, Tenure = 3, balance = 60000, number of products = 2, have a credit card = yes, an active memeber  = yes, salary = 50000 Dollars.
"""

print(ann.predict(fs.transform([[1,0,0,600,1,40,3,60000,2,1,1,50000]])) > 0.5)

y_pred = ann.predict(x_test)
y_pred = (y_pred > 0.5)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

# Confusion Matrix
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

# Display Confusion Matrix
import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(cm, annot=True)
plt.show()